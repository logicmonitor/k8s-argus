// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCollectorInstallerParams creates a new GetCollectorInstallerParams object
// with the default values initialized.
func NewGetCollectorInstallerParams() *GetCollectorInstallerParams {
	var (
		collectorSizeDefault = string("medium")
		monitorOthersDefault = bool(true)
		useEADefault         = bool(false)
	)
	return &GetCollectorInstallerParams{
		CollectorSize: &collectorSizeDefault,
		MonitorOthers: &monitorOthersDefault,
		UseEA:         &useEADefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCollectorInstallerParamsWithTimeout creates a new GetCollectorInstallerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCollectorInstallerParamsWithTimeout(timeout time.Duration) *GetCollectorInstallerParams {
	var (
		collectorSizeDefault = string("medium")
		monitorOthersDefault = bool(true)
		useEADefault         = bool(false)
	)
	return &GetCollectorInstallerParams{
		CollectorSize: &collectorSizeDefault,
		MonitorOthers: &monitorOthersDefault,
		UseEA:         &useEADefault,

		timeout: timeout,
	}
}

// NewGetCollectorInstallerParamsWithContext creates a new GetCollectorInstallerParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCollectorInstallerParamsWithContext(ctx context.Context) *GetCollectorInstallerParams {
	var (
		collectorSizeDefault = string("medium")
		monitorOthersDefault = bool(true)
		useEADefault         = bool(false)
	)
	return &GetCollectorInstallerParams{
		CollectorSize: &collectorSizeDefault,
		MonitorOthers: &monitorOthersDefault,
		UseEA:         &useEADefault,

		Context: ctx,
	}
}

// NewGetCollectorInstallerParamsWithHTTPClient creates a new GetCollectorInstallerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCollectorInstallerParamsWithHTTPClient(client *http.Client) *GetCollectorInstallerParams {
	var (
		collectorSizeDefault = string("medium")
		monitorOthersDefault = bool(true)
		useEADefault         = bool(false)
	)
	return &GetCollectorInstallerParams{
		CollectorSize: &collectorSizeDefault,
		MonitorOthers: &monitorOthersDefault,
		UseEA:         &useEADefault,
		HTTPClient:    client,
	}
}

/*GetCollectorInstallerParams contains all the parameters to send to the API endpoint
for the get collector installer operation typically these are written to a http.Request
*/
type GetCollectorInstallerParams struct {

	/*CollectorID*/
	CollectorID int32
	/*CollectorSize
	  The size of the Collector you'd like to install. Options are nano, small (requires 2GB memory), medium (requires 4GB memory), large (requires 8GB memory). Requires collector version 22.180 or higher. Defaults to small

	*/
	CollectorSize *string
	/*CollectorVersion
	  The version of the installer you'd like to download. This defaults to the latest GD Collector, unless useEA is true

	*/
	CollectorVersion *int32
	/*MonitorOthers*/
	MonitorOthers *bool
	/*OsAndArch*/
	OsAndArch string
	/*Token*/
	Token *string
	/*UseEA
	  If true, the latest EA Collector version will be used. Defaults to false

	*/
	UseEA *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get collector installer params
func (o *GetCollectorInstallerParams) WithTimeout(timeout time.Duration) *GetCollectorInstallerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get collector installer params
func (o *GetCollectorInstallerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get collector installer params
func (o *GetCollectorInstallerParams) WithContext(ctx context.Context) *GetCollectorInstallerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get collector installer params
func (o *GetCollectorInstallerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get collector installer params
func (o *GetCollectorInstallerParams) WithHTTPClient(client *http.Client) *GetCollectorInstallerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get collector installer params
func (o *GetCollectorInstallerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectorID adds the collectorID to the get collector installer params
func (o *GetCollectorInstallerParams) WithCollectorID(collectorID int32) *GetCollectorInstallerParams {
	o.SetCollectorID(collectorID)
	return o
}

// SetCollectorID adds the collectorId to the get collector installer params
func (o *GetCollectorInstallerParams) SetCollectorID(collectorID int32) {
	o.CollectorID = collectorID
}

// WithCollectorSize adds the collectorSize to the get collector installer params
func (o *GetCollectorInstallerParams) WithCollectorSize(collectorSize *string) *GetCollectorInstallerParams {
	o.SetCollectorSize(collectorSize)
	return o
}

// SetCollectorSize adds the collectorSize to the get collector installer params
func (o *GetCollectorInstallerParams) SetCollectorSize(collectorSize *string) {
	o.CollectorSize = collectorSize
}

// WithCollectorVersion adds the collectorVersion to the get collector installer params
func (o *GetCollectorInstallerParams) WithCollectorVersion(collectorVersion *int32) *GetCollectorInstallerParams {
	o.SetCollectorVersion(collectorVersion)
	return o
}

// SetCollectorVersion adds the collectorVersion to the get collector installer params
func (o *GetCollectorInstallerParams) SetCollectorVersion(collectorVersion *int32) {
	o.CollectorVersion = collectorVersion
}

// WithMonitorOthers adds the monitorOthers to the get collector installer params
func (o *GetCollectorInstallerParams) WithMonitorOthers(monitorOthers *bool) *GetCollectorInstallerParams {
	o.SetMonitorOthers(monitorOthers)
	return o
}

// SetMonitorOthers adds the monitorOthers to the get collector installer params
func (o *GetCollectorInstallerParams) SetMonitorOthers(monitorOthers *bool) {
	o.MonitorOthers = monitorOthers
}

// WithOsAndArch adds the osAndArch to the get collector installer params
func (o *GetCollectorInstallerParams) WithOsAndArch(osAndArch string) *GetCollectorInstallerParams {
	o.SetOsAndArch(osAndArch)
	return o
}

// SetOsAndArch adds the osAndArch to the get collector installer params
func (o *GetCollectorInstallerParams) SetOsAndArch(osAndArch string) {
	o.OsAndArch = osAndArch
}

// WithToken adds the token to the get collector installer params
func (o *GetCollectorInstallerParams) WithToken(token *string) *GetCollectorInstallerParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get collector installer params
func (o *GetCollectorInstallerParams) SetToken(token *string) {
	o.Token = token
}

// WithUseEA adds the useEA to the get collector installer params
func (o *GetCollectorInstallerParams) WithUseEA(useEA *bool) *GetCollectorInstallerParams {
	o.SetUseEA(useEA)
	return o
}

// SetUseEA adds the useEA to the get collector installer params
func (o *GetCollectorInstallerParams) SetUseEA(useEA *bool) {
	o.UseEA = useEA
}

// WriteToRequest writes these params to a swagger request
func (o *GetCollectorInstallerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collectorId
	if err := r.SetPathParam("collectorId", swag.FormatInt32(o.CollectorID)); err != nil {
		return err
	}

	if o.CollectorSize != nil {

		// query param collectorSize
		var qrCollectorSize string
		if o.CollectorSize != nil {
			qrCollectorSize = *o.CollectorSize
		}
		qCollectorSize := qrCollectorSize
		if qCollectorSize != "" {
			if err := r.SetQueryParam("collectorSize", qCollectorSize); err != nil {
				return err
			}
		}

	}

	if o.CollectorVersion != nil {

		// query param collectorVersion
		var qrCollectorVersion int32
		if o.CollectorVersion != nil {
			qrCollectorVersion = *o.CollectorVersion
		}
		qCollectorVersion := swag.FormatInt32(qrCollectorVersion)
		if qCollectorVersion != "" {
			if err := r.SetQueryParam("collectorVersion", qCollectorVersion); err != nil {
				return err
			}
		}

	}

	if o.MonitorOthers != nil {

		// query param monitorOthers
		var qrMonitorOthers bool
		if o.MonitorOthers != nil {
			qrMonitorOthers = *o.MonitorOthers
		}
		qMonitorOthers := swag.FormatBool(qrMonitorOthers)
		if qMonitorOthers != "" {
			if err := r.SetQueryParam("monitorOthers", qMonitorOthers); err != nil {
				return err
			}
		}

	}

	// path param osAndArch
	if err := r.SetPathParam("osAndArch", o.OsAndArch); err != nil {
		return err
	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if o.UseEA != nil {

		// query param useEA
		var qrUseEA bool
		if o.UseEA != nil {
			qrUseEA = *o.UseEA
		}
		qUseEA := swag.FormatBool(qrUseEA)
		if qUseEA != "" {
			if err := r.SetQueryParam("useEA", qUseEA); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
