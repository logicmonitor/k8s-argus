// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteAPITokenByIDParams creates a new DeleteAPITokenByIDParams object
// with the default values initialized.
func NewDeleteAPITokenByIDParams() *DeleteAPITokenByIDParams {
	var ()
	return &DeleteAPITokenByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteAPITokenByIDParamsWithTimeout creates a new DeleteAPITokenByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteAPITokenByIDParamsWithTimeout(timeout time.Duration) *DeleteAPITokenByIDParams {
	var ()
	return &DeleteAPITokenByIDParams{

		timeout: timeout,
	}
}

// NewDeleteAPITokenByIDParamsWithContext creates a new DeleteAPITokenByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteAPITokenByIDParamsWithContext(ctx context.Context) *DeleteAPITokenByIDParams {
	var ()
	return &DeleteAPITokenByIDParams{

		Context: ctx,
	}
}

// NewDeleteAPITokenByIDParamsWithHTTPClient creates a new DeleteAPITokenByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteAPITokenByIDParamsWithHTTPClient(client *http.Client) *DeleteAPITokenByIDParams {
	var ()
	return &DeleteAPITokenByIDParams{
		HTTPClient: client,
	}
}

/*DeleteAPITokenByIDParams contains all the parameters to send to the API endpoint
for the delete Api token by Id operation typically these are written to a http.Request
*/
type DeleteAPITokenByIDParams struct {

	/*AdminID*/
	AdminID int32
	/*ApitokenID*/
	ApitokenID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) WithTimeout(timeout time.Duration) *DeleteAPITokenByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) WithContext(ctx context.Context) *DeleteAPITokenByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) WithHTTPClient(client *http.Client) *DeleteAPITokenByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdminID adds the adminID to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) WithAdminID(adminID int32) *DeleteAPITokenByIDParams {
	o.SetAdminID(adminID)
	return o
}

// SetAdminID adds the adminId to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) SetAdminID(adminID int32) {
	o.AdminID = adminID
}

// WithApitokenID adds the apitokenID to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) WithApitokenID(apitokenID int32) *DeleteAPITokenByIDParams {
	o.SetApitokenID(apitokenID)
	return o
}

// SetApitokenID adds the apitokenId to the delete Api token by Id params
func (o *DeleteAPITokenByIDParams) SetApitokenID(apitokenID int32) {
	o.ApitokenID = apitokenID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteAPITokenByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param adminId
	if err := r.SetPathParam("adminId", swag.FormatInt32(o.AdminID)); err != nil {
		return err
	}

	// path param apitokenId
	if err := r.SetPathParam("apitokenId", swag.FormatInt32(o.ApitokenID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
