// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeviceDataSource device data source
// swagger:model DeviceDataSource
type DeviceDataSource struct {

	// alert disable status
	// Read Only: true
	AlertDisableStatus string `json:"alertDisableStatus,omitempty"`

	// alert status
	// Read Only: true
	AlertStatus string `json:"alertStatus,omitempty"`

	// alert status priority
	// Read Only: true
	AlertStatusPriority int32 `json:"alertStatusPriority,omitempty"`

	// alerting disabled on
	// Read Only: true
	AlertingDisabledOn *TreeNode `json:"alertingDisabledOn,omitempty"`

	// assigned on
	// Read Only: true
	AssignedOn int64 `json:"assignedOn,omitempty"`

	// auto discovery
	// Read Only: true
	AutoDiscovery *bool `json:"autoDiscovery,omitempty"`

	// collect method
	CollectMethod string `json:"collectMethod,omitempty"`

	// created on
	// Read Only: true
	CreatedOn int64 `json:"createdOn,omitempty"`

	// data source description
	// Read Only: true
	DataSourceDescription string `json:"dataSourceDescription,omitempty"`

	// data source display name
	// Read Only: true
	DataSourceDisplayName string `json:"dataSourceDisplayName,omitempty"`

	// data source Id
	// Read Only: true
	DataSourceID int32 `json:"dataSourceId,omitempty"`

	// data source name
	// Read Only: true
	DataSourceName string `json:"dataSourceName,omitempty"`

	// data source type
	// Read Only: true
	DataSourceType string `json:"dataSourceType,omitempty"`

	// device display name
	// Read Only: true
	DeviceDisplayName string `json:"deviceDisplayName,omitempty"`

	// device Id
	// Read Only: true
	DeviceID int32 `json:"deviceId,omitempty"`

	// device name
	// Read Only: true
	DeviceName string `json:"deviceName,omitempty"`

	// graphs
	// Read Only: true
	Graphs []*DeviceDatasourceGraph `json:"graphs,omitempty"`

	// group name
	// Read Only: true
	GroupName string `json:"groupName,omitempty"`

	// groups disabled this source
	// Read Only: true
	GroupsDisabledThisSource []*TreeNode `json:"groupsDisabledThisSource,omitempty"`

	// id
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// instance auto group enabled
	// Read Only: true
	InstanceAutoGroupEnabled *bool `json:"instanceAutoGroupEnabled,omitempty"`

	// instance number
	// Read Only: true
	InstanceNumber int32 `json:"instanceNumber,omitempty"`

	// is multiple
	// Read Only: true
	IsMultiple *bool `json:"isMultiple,omitempty"`

	// monitoring instance number
	// Read Only: true
	MonitoringInstanceNumber int32 `json:"monitoringInstanceNumber,omitempty"`

	// next auto discovery on
	// Read Only: true
	NextAutoDiscoveryOn int64 `json:"nextAutoDiscoveryOn,omitempty"`

	// overview graphs
	// Read Only: true
	OverviewGraphs []*DeviceDatasourceGraph `json:"overviewGraphs,omitempty"`

	// sdt at
	// Read Only: true
	SDTAt string `json:"sdtAt,omitempty"`

	// sdt status
	// Read Only: true
	SDTStatus string `json:"sdtStatus,omitempty"`

	// status
	// Read Only: true
	Status int32 `json:"status,omitempty"`

	// stop monitoring
	// Read Only: true
	StopMonitoring *bool `json:"stopMonitoring,omitempty"`

	// updated on
	// Read Only: true
	UpdatedOn int64 `json:"updatedOn,omitempty"`
}

// Validate validates this device data source
func (m *DeviceDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertingDisabledOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupsDisabledThisSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverviewGraphs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceDataSource) validateAlertingDisabledOn(formats strfmt.Registry) error {

	if swag.IsZero(m.AlertingDisabledOn) { // not required
		return nil
	}

	if m.AlertingDisabledOn != nil {
		if err := m.AlertingDisabledOn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingDisabledOn")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceDataSource) validateGraphs(formats strfmt.Registry) error {

	if swag.IsZero(m.Graphs) { // not required
		return nil
	}

	for i := 0; i < len(m.Graphs); i++ {
		if swag.IsZero(m.Graphs[i]) { // not required
			continue
		}

		if m.Graphs[i] != nil {
			if err := m.Graphs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("graphs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDataSource) validateGroupsDisabledThisSource(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupsDisabledThisSource) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupsDisabledThisSource); i++ {
		if swag.IsZero(m.GroupsDisabledThisSource[i]) { // not required
			continue
		}

		if m.GroupsDisabledThisSource[i] != nil {
			if err := m.GroupsDisabledThisSource[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupsDisabledThisSource" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDataSource) validateOverviewGraphs(formats strfmt.Registry) error {

	if swag.IsZero(m.OverviewGraphs) { // not required
		return nil
	}

	for i := 0; i < len(m.OverviewGraphs); i++ {
		if swag.IsZero(m.OverviewGraphs[i]) { // not required
			continue
		}

		if m.OverviewGraphs[i] != nil {
			if err := m.OverviewGraphs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overviewGraphs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDataSource) UnmarshalBinary(b []byte) error {
	var res DeviceDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
