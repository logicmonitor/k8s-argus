// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostMetricsReport host metrics report
// swagger:model HostMetricsReport
type HostMetricsReport struct {
	customReportTypeIdField int32

	customReportTypeNameField string

	deliveryField string

	descriptionField string

	enableViewAsOtherUserField *bool

	formatField string

	groupIdField int32

	idField int32

	lastGenerateOnField int64

	lastGeneratePagesField int32

	lastGenerateSizeField int64

	lastmodifyUserIdField int32

	lastmodifyUserNameField string

	nameField *string

	recipientsField []*ReportRecipient

	reportLinkNumField int32

	scheduleField string

	scheduleTimezoneField string

	userPermissionField string

	// The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not
	Columns []*DynamicColumn `json:"columns,omitempty"`

	// The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm
	DateRange string `json:"dateRange,omitempty"`

	// The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported
	HostsVal string `json:"hostsVal,omitempty"`

	// host | group. The type of entities specified in the hostsVal field
	// Required: true
	HostsValType *string `json:"hostsValType"`

	// The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)
	// Required: true
	Metrics []*Metric `json:"metrics"`

	// 0 | 1 | 2 | 3
	// 0: Text only - metrics will be displayed in a tabular format.
	// 1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device.
	// 2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance.
	// 3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.
	// Required: true
	RowFormat *int32 `json:"rowFormat"`

	// host | instance | metric
	// host: Information displayed in the report will be sorted by device
	// instance: Information displayed in the report will be sorted by instance
	// metric: Information displayed in the report will be sorted by datapoint (metric)
	// Required: true
	SortedBy *string `json:"sortedBy"`

	// true | false
	// false: Metrics will be displayed for all selected devices or groups
	// true: Metrics will only be displayed for the top ten device or groups
	// Required: true
	Top10Only *bool `json:"top10Only"`
}

// CustomReportTypeID gets the custom report type Id of this subtype
func (m *HostMetricsReport) CustomReportTypeID() int32 {
	return m.customReportTypeIdField
}

// SetCustomReportTypeID sets the custom report type Id of this subtype
func (m *HostMetricsReport) SetCustomReportTypeID(val int32) {
	m.customReportTypeIdField = val
}

// CustomReportTypeName gets the custom report type name of this subtype
func (m *HostMetricsReport) CustomReportTypeName() string {
	return m.customReportTypeNameField
}

// SetCustomReportTypeName sets the custom report type name of this subtype
func (m *HostMetricsReport) SetCustomReportTypeName(val string) {
	m.customReportTypeNameField = val
}

// Delivery gets the delivery of this subtype
func (m *HostMetricsReport) Delivery() string {
	return m.deliveryField
}

// SetDelivery sets the delivery of this subtype
func (m *HostMetricsReport) SetDelivery(val string) {
	m.deliveryField = val
}

// Description gets the description of this subtype
func (m *HostMetricsReport) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this subtype
func (m *HostMetricsReport) SetDescription(val string) {
	m.descriptionField = val
}

// EnableViewAsOtherUser gets the enable view as other user of this subtype
func (m *HostMetricsReport) EnableViewAsOtherUser() *bool {
	return m.enableViewAsOtherUserField
}

// SetEnableViewAsOtherUser sets the enable view as other user of this subtype
func (m *HostMetricsReport) SetEnableViewAsOtherUser(val *bool) {
	m.enableViewAsOtherUserField = val
}

// Format gets the format of this subtype
func (m *HostMetricsReport) Format() string {
	return m.formatField
}

// SetFormat sets the format of this subtype
func (m *HostMetricsReport) SetFormat(val string) {
	m.formatField = val
}

// GroupID gets the group Id of this subtype
func (m *HostMetricsReport) GroupID() int32 {
	return m.groupIdField
}

// SetGroupID sets the group Id of this subtype
func (m *HostMetricsReport) SetGroupID(val int32) {
	m.groupIdField = val
}

// ID gets the id of this subtype
func (m *HostMetricsReport) ID() int32 {
	return m.idField
}

// SetID sets the id of this subtype
func (m *HostMetricsReport) SetID(val int32) {
	m.idField = val
}

// LastGenerateOn gets the last generate on of this subtype
func (m *HostMetricsReport) LastGenerateOn() int64 {
	return m.lastGenerateOnField
}

// SetLastGenerateOn sets the last generate on of this subtype
func (m *HostMetricsReport) SetLastGenerateOn(val int64) {
	m.lastGenerateOnField = val
}

// LastGeneratePages gets the last generate pages of this subtype
func (m *HostMetricsReport) LastGeneratePages() int32 {
	return m.lastGeneratePagesField
}

// SetLastGeneratePages sets the last generate pages of this subtype
func (m *HostMetricsReport) SetLastGeneratePages(val int32) {
	m.lastGeneratePagesField = val
}

// LastGenerateSize gets the last generate size of this subtype
func (m *HostMetricsReport) LastGenerateSize() int64 {
	return m.lastGenerateSizeField
}

// SetLastGenerateSize sets the last generate size of this subtype
func (m *HostMetricsReport) SetLastGenerateSize(val int64) {
	m.lastGenerateSizeField = val
}

// LastmodifyUserID gets the lastmodify user Id of this subtype
func (m *HostMetricsReport) LastmodifyUserID() int32 {
	return m.lastmodifyUserIdField
}

// SetLastmodifyUserID sets the lastmodify user Id of this subtype
func (m *HostMetricsReport) SetLastmodifyUserID(val int32) {
	m.lastmodifyUserIdField = val
}

// LastmodifyUserName gets the lastmodify user name of this subtype
func (m *HostMetricsReport) LastmodifyUserName() string {
	return m.lastmodifyUserNameField
}

// SetLastmodifyUserName sets the lastmodify user name of this subtype
func (m *HostMetricsReport) SetLastmodifyUserName(val string) {
	m.lastmodifyUserNameField = val
}

// Name gets the name of this subtype
func (m *HostMetricsReport) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *HostMetricsReport) SetName(val *string) {
	m.nameField = val
}

// Recipients gets the recipients of this subtype
func (m *HostMetricsReport) Recipients() []*ReportRecipient {
	return m.recipientsField
}

// SetRecipients sets the recipients of this subtype
func (m *HostMetricsReport) SetRecipients(val []*ReportRecipient) {
	m.recipientsField = val
}

// ReportLinkNum gets the report link num of this subtype
func (m *HostMetricsReport) ReportLinkNum() int32 {
	return m.reportLinkNumField
}

// SetReportLinkNum sets the report link num of this subtype
func (m *HostMetricsReport) SetReportLinkNum(val int32) {
	m.reportLinkNumField = val
}

// Schedule gets the schedule of this subtype
func (m *HostMetricsReport) Schedule() string {
	return m.scheduleField
}

// SetSchedule sets the schedule of this subtype
func (m *HostMetricsReport) SetSchedule(val string) {
	m.scheduleField = val
}

// ScheduleTimezone gets the schedule timezone of this subtype
func (m *HostMetricsReport) ScheduleTimezone() string {
	return m.scheduleTimezoneField
}

// SetScheduleTimezone sets the schedule timezone of this subtype
func (m *HostMetricsReport) SetScheduleTimezone(val string) {
	m.scheduleTimezoneField = val
}

// Type gets the type of this subtype
func (m *HostMetricsReport) Type() string {
	return "Host metric trends"
}

// SetType sets the type of this subtype
func (m *HostMetricsReport) SetType(val string) {

}

// UserPermission gets the user permission of this subtype
func (m *HostMetricsReport) UserPermission() string {
	return m.userPermissionField
}

// SetUserPermission sets the user permission of this subtype
func (m *HostMetricsReport) SetUserPermission(val string) {
	m.userPermissionField = val
}

// Columns gets the columns of this subtype

// DateRange gets the date range of this subtype

// HostsVal gets the hosts val of this subtype

// HostsValType gets the hosts val type of this subtype

// Metrics gets the metrics of this subtype

// RowFormat gets the row format of this subtype

// SortedBy gets the sorted by of this subtype

// Top10Only gets the top10 only of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *HostMetricsReport) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not
		Columns []*DynamicColumn `json:"columns,omitempty"`

		// The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm
		DateRange string `json:"dateRange,omitempty"`

		// The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported
		HostsVal string `json:"hostsVal,omitempty"`

		// host | group. The type of entities specified in the hostsVal field
		// Required: true
		HostsValType *string `json:"hostsValType"`

		// The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)
		// Required: true
		Metrics []*Metric `json:"metrics"`

		// 0 | 1 | 2 | 3
		// 0: Text only - metrics will be displayed in a tabular format.
		// 1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device.
		// 2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance.
		// 3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.
		// Required: true
		RowFormat *int32 `json:"rowFormat"`

		// host | instance | metric
		// host: Information displayed in the report will be sorted by device
		// instance: Information displayed in the report will be sorted by instance
		// metric: Information displayed in the report will be sorted by datapoint (metric)
		// Required: true
		SortedBy *string `json:"sortedBy"`

		// true | false
		// false: Metrics will be displayed for all selected devices or groups
		// true: Metrics will only be displayed for the top ten device or groups
		// Required: true
		Top10Only *bool `json:"top10Only"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		CustomReportTypeID int32 `json:"customReportTypeId,omitempty"`

		CustomReportTypeName string `json:"customReportTypeName,omitempty"`

		Delivery string `json:"delivery,omitempty"`

		Description string `json:"description,omitempty"`

		EnableViewAsOtherUser *bool `json:"enableViewAsOtherUser,omitempty"`

		Format string `json:"format,omitempty"`

		GroupID int32 `json:"groupId,omitempty"`

		ID int32 `json:"id,omitempty"`

		LastGenerateOn int64 `json:"lastGenerateOn,omitempty"`

		LastGeneratePages int32 `json:"lastGeneratePages,omitempty"`

		LastGenerateSize int64 `json:"lastGenerateSize,omitempty"`

		LastmodifyUserID int32 `json:"lastmodifyUserId,omitempty"`

		LastmodifyUserName string `json:"lastmodifyUserName,omitempty"`

		Name *string `json:"name"`

		Recipients []*ReportRecipient `json:"recipients,omitempty"`

		ReportLinkNum int32 `json:"reportLinkNum,omitempty"`

		Schedule string `json:"schedule,omitempty"`

		ScheduleTimezone string `json:"scheduleTimezone,omitempty"`

		Type string `json:"type"`

		UserPermission string `json:"userPermission,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result HostMetricsReport

	result.customReportTypeIdField = base.CustomReportTypeID

	result.customReportTypeNameField = base.CustomReportTypeName

	result.deliveryField = base.Delivery

	result.descriptionField = base.Description

	result.enableViewAsOtherUserField = base.EnableViewAsOtherUser

	result.formatField = base.Format

	result.groupIdField = base.GroupID

	result.idField = base.ID

	result.lastGenerateOnField = base.LastGenerateOn

	result.lastGeneratePagesField = base.LastGeneratePages

	result.lastGenerateSizeField = base.LastGenerateSize

	result.lastmodifyUserIdField = base.LastmodifyUserID

	result.lastmodifyUserNameField = base.LastmodifyUserName

	result.nameField = base.Name

	result.recipientsField = base.Recipients

	result.reportLinkNumField = base.ReportLinkNum

	result.scheduleField = base.Schedule

	result.scheduleTimezoneField = base.ScheduleTimezone

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.userPermissionField = base.UserPermission

	result.Columns = data.Columns

	result.DateRange = data.DateRange

	result.HostsVal = data.HostsVal

	result.HostsValType = data.HostsValType

	result.Metrics = data.Metrics

	result.RowFormat = data.RowFormat

	result.SortedBy = data.SortedBy

	result.Top10Only = data.Top10Only

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m HostMetricsReport) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not
		Columns []*DynamicColumn `json:"columns,omitempty"`

		// The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm
		DateRange string `json:"dateRange,omitempty"`

		// The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported
		HostsVal string `json:"hostsVal,omitempty"`

		// host | group. The type of entities specified in the hostsVal field
		// Required: true
		HostsValType *string `json:"hostsValType"`

		// The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)
		// Required: true
		Metrics []*Metric `json:"metrics"`

		// 0 | 1 | 2 | 3
		// 0: Text only - metrics will be displayed in a tabular format.
		// 1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device.
		// 2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance.
		// 3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.
		// Required: true
		RowFormat *int32 `json:"rowFormat"`

		// host | instance | metric
		// host: Information displayed in the report will be sorted by device
		// instance: Information displayed in the report will be sorted by instance
		// metric: Information displayed in the report will be sorted by datapoint (metric)
		// Required: true
		SortedBy *string `json:"sortedBy"`

		// true | false
		// false: Metrics will be displayed for all selected devices or groups
		// true: Metrics will only be displayed for the top ten device or groups
		// Required: true
		Top10Only *bool `json:"top10Only"`
	}{

		Columns: m.Columns,

		DateRange: m.DateRange,

		HostsVal: m.HostsVal,

		HostsValType: m.HostsValType,

		Metrics: m.Metrics,

		RowFormat: m.RowFormat,

		SortedBy: m.SortedBy,

		Top10Only: m.Top10Only,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		CustomReportTypeID int32 `json:"customReportTypeId,omitempty"`

		CustomReportTypeName string `json:"customReportTypeName,omitempty"`

		Delivery string `json:"delivery,omitempty"`

		Description string `json:"description,omitempty"`

		EnableViewAsOtherUser *bool `json:"enableViewAsOtherUser,omitempty"`

		Format string `json:"format,omitempty"`

		GroupID int32 `json:"groupId,omitempty"`

		ID int32 `json:"id,omitempty"`

		LastGenerateOn int64 `json:"lastGenerateOn,omitempty"`

		LastGeneratePages int32 `json:"lastGeneratePages,omitempty"`

		LastGenerateSize int64 `json:"lastGenerateSize,omitempty"`

		LastmodifyUserID int32 `json:"lastmodifyUserId,omitempty"`

		LastmodifyUserName string `json:"lastmodifyUserName,omitempty"`

		Name *string `json:"name"`

		Recipients []*ReportRecipient `json:"recipients,omitempty"`

		ReportLinkNum int32 `json:"reportLinkNum,omitempty"`

		Schedule string `json:"schedule,omitempty"`

		ScheduleTimezone string `json:"scheduleTimezone,omitempty"`

		Type string `json:"type"`

		UserPermission string `json:"userPermission,omitempty"`
	}{

		CustomReportTypeID: m.CustomReportTypeID(),

		CustomReportTypeName: m.CustomReportTypeName(),

		Delivery: m.Delivery(),

		Description: m.Description(),

		EnableViewAsOtherUser: m.EnableViewAsOtherUser(),

		Format: m.Format(),

		GroupID: m.GroupID(),

		ID: m.ID(),

		LastGenerateOn: m.LastGenerateOn(),

		LastGeneratePages: m.LastGeneratePages(),

		LastGenerateSize: m.LastGenerateSize(),

		LastmodifyUserID: m.LastmodifyUserID(),

		LastmodifyUserName: m.LastmodifyUserName(),

		Name: m.Name(),

		Recipients: m.Recipients(),

		ReportLinkNum: m.ReportLinkNum(),

		Schedule: m.Schedule(),

		ScheduleTimezone: m.ScheduleTimezone(),

		Type: m.Type(),

		UserPermission: m.UserPermission(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this host metrics report
func (m *HostMetricsReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsValType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTop10Only(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostMetricsReport) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *HostMetricsReport) validateRecipients(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipients()) { // not required
		return nil
	}

	for i := 0; i < len(m.Recipients()); i++ {
		if swag.IsZero(m.recipientsField[i]) { // not required
			continue
		}

		if m.recipientsField[i] != nil {
			if err := m.recipientsField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostMetricsReport) validateColumns(formats strfmt.Registry) error {

	if swag.IsZero(m.Columns) { // not required
		return nil
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostMetricsReport) validateHostsValType(formats strfmt.Registry) error {

	if err := validate.Required("hostsValType", "body", m.HostsValType); err != nil {
		return err
	}

	return nil
}

func (m *HostMetricsReport) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HostMetricsReport) validateRowFormat(formats strfmt.Registry) error {

	if err := validate.Required("rowFormat", "body", m.RowFormat); err != nil {
		return err
	}

	return nil
}

func (m *HostMetricsReport) validateSortedBy(formats strfmt.Registry) error {

	if err := validate.Required("sortedBy", "body", m.SortedBy); err != nil {
		return err
	}

	return nil
}

func (m *HostMetricsReport) validateTop10Only(formats strfmt.Registry) error {

	if err := validate.Required("top10Only", "body", m.Top10Only); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostMetricsReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostMetricsReport) UnmarshalBinary(b []byte) error {
	var res HostMetricsReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
