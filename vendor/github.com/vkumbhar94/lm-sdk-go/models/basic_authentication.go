// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicAuthentication basic authentication
// swagger:model BasicAuthentication
type BasicAuthentication struct {
	passwordField *string

	userNameField *string

	BasicAuthenticationAllOf1
}

// Password gets the password of this subtype
func (m *BasicAuthentication) Password() *string {
	return m.passwordField
}

// SetPassword sets the password of this subtype
func (m *BasicAuthentication) SetPassword(val *string) {
	m.passwordField = val
}

// Type gets the type of this subtype
func (m *BasicAuthentication) Type() string {
	return "basic"
}

// SetType sets the type of this subtype
func (m *BasicAuthentication) SetType(val string) {

}

// UserName gets the user name of this subtype
func (m *BasicAuthentication) UserName() *string {
	return m.userNameField
}

// SetUserName sets the user name of this subtype
func (m *BasicAuthentication) SetUserName(val *string) {
	m.userNameField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *BasicAuthentication) UnmarshalJSON(raw []byte) error {
	var data struct {
		BasicAuthenticationAllOf1
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Password *string `json:"password"`

		Type string `json:"type"`

		UserName *string `json:"userName"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result BasicAuthentication

	result.passwordField = base.Password

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.userNameField = base.UserName

	result.BasicAuthenticationAllOf1 = data.BasicAuthenticationAllOf1

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m BasicAuthentication) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		BasicAuthenticationAllOf1
	}{

		BasicAuthenticationAllOf1: m.BasicAuthenticationAllOf1,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Password *string `json:"password"`

		Type string `json:"type"`

		UserName *string `json:"userName"`
	}{

		Password: m.Password(),

		Type: m.Type(),

		UserName: m.UserName(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this basic authentication
func (m *BasicAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with BasicAuthenticationAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicAuthentication) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password()); err != nil {
		return err
	}

	return nil
}

func (m *BasicAuthentication) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicAuthentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicAuthentication) UnmarshalBinary(b []byte) error {
	var res BasicAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BasicAuthenticationAllOf1 basic authentication all of1
// swagger:model BasicAuthenticationAllOf1
type BasicAuthenticationAllOf1 interface{}
