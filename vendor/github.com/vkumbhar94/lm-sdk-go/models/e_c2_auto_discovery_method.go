// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EC2AutoDiscoveryMethod e c2 auto discovery method
// swagger:model EC2AutoDiscoveryMethod
type EC2AutoDiscoveryMethod struct {

	// access key Id
	// Required: true
	AccessKeyID *string `json:"accessKeyId"`

	// secret access key
	// Required: true
	SecretAccessKey *string `json:"secretAccessKey"`
}

// Name gets the name of this subtype
func (m *EC2AutoDiscoveryMethod) Name() string {
	return "ad_ec2"
}

// SetName sets the name of this subtype
func (m *EC2AutoDiscoveryMethod) SetName(val string) {

}

// AccessKeyID gets the access key Id of this subtype

// SecretAccessKey gets the secret access key of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *EC2AutoDiscoveryMethod) UnmarshalJSON(raw []byte) error {
	var data struct {

		// access key Id
		// Required: true
		AccessKeyID *string `json:"accessKeyId"`

		// secret access key
		// Required: true
		SecretAccessKey *string `json:"secretAccessKey"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Name string `json:"name"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result EC2AutoDiscoveryMethod

	if base.Name != result.Name() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid name value: %q", base.Name)
	}

	result.AccessKeyID = data.AccessKeyID

	result.SecretAccessKey = data.SecretAccessKey

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m EC2AutoDiscoveryMethod) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// access key Id
		// Required: true
		AccessKeyID *string `json:"accessKeyId"`

		// secret access key
		// Required: true
		SecretAccessKey *string `json:"secretAccessKey"`
	}{

		AccessKeyID: m.AccessKeyID,

		SecretAccessKey: m.SecretAccessKey,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Name string `json:"name"`
	}{

		Name: m.Name(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this e c2 auto discovery method
func (m *EC2AutoDiscoveryMethod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EC2AutoDiscoveryMethod) validateAccessKeyID(formats strfmt.Registry) error {

	if err := validate.Required("accessKeyId", "body", m.AccessKeyID); err != nil {
		return err
	}

	return nil
}

func (m *EC2AutoDiscoveryMethod) validateSecretAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("secretAccessKey", "body", m.SecretAccessKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EC2AutoDiscoveryMethod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EC2AutoDiscoveryMethod) UnmarshalBinary(b []byte) error {
	var res EC2AutoDiscoveryMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
