// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NOCWidgetData n o c widget data
// swagger:model NOCWidgetData
type NOCWidgetData struct {
	titleField string

	// ack checked
	// Read Only: true
	AckChecked *bool `json:"ackChecked,omitempty"`

	// items
	// Read Only: true
	// Unique: true
	Items []*ItemData `json:"items,omitempty"`

	// sdt checked
	// Read Only: true
	SDTChecked *bool `json:"sdtChecked,omitempty"`
}

// Title gets the title of this subtype
func (m *NOCWidgetData) Title() string {
	return m.titleField
}

// SetTitle sets the title of this subtype
func (m *NOCWidgetData) SetTitle(val string) {
	m.titleField = val
}

// Type gets the type of this subtype
func (m *NOCWidgetData) Type() string {
	return "noc"
}

// SetType sets the type of this subtype
func (m *NOCWidgetData) SetType(val string) {

}

// AckChecked gets the ack checked of this subtype

// Items gets the items of this subtype

// SDTChecked gets the sdt checked of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *NOCWidgetData) UnmarshalJSON(raw []byte) error {
	var data struct {

		// ack checked
		// Read Only: true
		AckChecked *bool `json:"ackChecked,omitempty"`

		// items
		// Read Only: true
		// Unique: true
		Items []*ItemData `json:"items,omitempty"`

		// sdt checked
		// Read Only: true
		SDTChecked *bool `json:"sdtChecked,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Title string `json:"title,omitempty"`

		Type string `json:"type,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result NOCWidgetData

	result.titleField = base.Title

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AckChecked = data.AckChecked

	result.Items = data.Items

	result.SDTChecked = data.SDTChecked

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m NOCWidgetData) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// ack checked
		// Read Only: true
		AckChecked *bool `json:"ackChecked,omitempty"`

		// items
		// Read Only: true
		// Unique: true
		Items []*ItemData `json:"items,omitempty"`

		// sdt checked
		// Read Only: true
		SDTChecked *bool `json:"sdtChecked,omitempty"`
	}{

		AckChecked: m.AckChecked,

		Items: m.Items,

		SDTChecked: m.SDTChecked,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Title string `json:"title,omitempty"`

		Type string `json:"type,omitempty"`
	}{

		Title: m.Title(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this n o c widget data
func (m *NOCWidgetData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NOCWidgetData) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if err := validate.UniqueItems("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NOCWidgetData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NOCWidgetData) UnmarshalBinary(b []byte) error {
	var res NOCWidgetData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
