// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Collector collector
// swagger:model Collector
type Collector struct {

	// The comment associated with the Collector acknowledgement (if it is in alert and acknowledged)
	// Read Only: true
	AckComment string `json:"ackComment,omitempty"`

	// Whether or not the Collector is currently acknowledged
	// Read Only: true
	Acked *bool `json:"acked,omitempty"`

	// The user that acknowledged the Collector (if it is in alert)
	// Read Only: true
	AckedBy string `json:"ackedBy,omitempty"`

	// The epoch at which the Collector was acknowledged (if it is in alert)
	// Read Only: true
	AckedOn int64 `json:"ackedOn,omitempty"`

	// The time that the Collector was acknowledged (if it is in alert), in local time format
	// Read Only: true
	AckedOnLocal string `json:"ackedOnLocal,omitempty"`

	// The collector architecture (Windows | Linux platform followed by 32 | 64 bit)
	// Read Only: true
	Arch string `json:"arch,omitempty"`

	// The details of the Collector's automatic upgrade schedule, if one exists
	AutomaticUpgradeInfo *AutomaticUpgradeInfo `json:"automaticUpgradeInfo,omitempty"`

	// The Id of the backup Collector assigned to the Collector
	BackupAgentID int32 `json:"backupAgentId,omitempty"`

	// The Collector version
	// Read Only: true
	Build string `json:"build,omitempty"`

	// Whether the collector can be downgraded to a lower version
	// Read Only: true
	CanDowngrade *bool `json:"canDowngrade,omitempty"`

	// The reason why the collector can be downgraded
	// Read Only: true
	CanDowngradeReason string `json:"canDowngradeReason,omitempty"`

	// Whether or not an alert clear notifcation has been sent for this Collector
	// Read Only: true
	ClearSent *bool `json:"clearSent,omitempty"`

	// The Collector's configuration file
	// Read Only: true
	CollectorConf string `json:"collectorConf,omitempty"`

	// The device id of the collector device
	// Read Only: true
	CollectorDeviceID int32 `json:"collectorDeviceId,omitempty"`

	// The Id of the group the Collector is in
	CollectorGroupID int32 `json:"collectorGroupId,omitempty"`

	// The name of the group the Collector is in
	// Read Only: true
	CollectorGroupName string `json:"collectorGroupName,omitempty"`

	// The size of the collector
	// Read Only: true
	CollectorSize string `json:"collectorSize,omitempty"`

	// The version of the agent.conf configuration file
	// Read Only: true
	ConfVersion string `json:"confVersion,omitempty"`

	// The time that the Collector was created, in epoch format
	// Read Only: true
	CreatedOn int64 `json:"createdOn,omitempty"`

	// The time that the Collector was created, in local time format
	// Read Only: true
	CreatedOnLocal string `json:"createdOnLocal,omitempty"`

	// The custom properties defined for the Collector
	CustomProperties []*NameAndValue `json:"customProperties,omitempty"`

	// The Collector's description
	Description string `json:"description,omitempty"`

	// Whether the collector is in EA version
	// Read Only: true
	Ea *bool `json:"ea,omitempty"`

	// Whether or not automatic failback is enabled for the Collector
	EnableFailBack bool `json:"enableFailBack,omitempty"`

	// Whether or not the device the Collector is installed on is enabled for fail over
	EnableFailOverOnCollectorDevice bool `json:"enableFailOverOnCollectorDevice,omitempty"`

	// The Id of the escalation chain associated with this Collector
	EscalatingChainID int32 `json:"escalatingChainId,omitempty"`

	// Whether the collector has failover devices
	// Read Only: true
	HasFailOverDevice *bool `json:"hasFailOverDevice,omitempty"`

	// The hostname of the device the Collector is installed on
	// Read Only: true
	Hostname string `json:"hostname,omitempty"`

	// The id of the Collector
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The SDT status of the collector
	// Read Only: true
	InSDT *bool `json:"inSDT,omitempty"`

	// Whether or not the Collector is currently down
	// Read Only: true
	IsDown *bool `json:"isDown,omitempty"`

	// The time, in epoch format, that a notification was last sent for the Collector
	// Read Only: true
	LastSentNotificationOn int64 `json:"lastSentNotificationOn,omitempty"`

	// The time that a notification was last sent for this Collector, in local time format
	// Read Only: true
	LastSentNotificationOnLocal string `json:"lastSentNotificationOnLocal,omitempty"`

	// Whether to create a collector device when instance collector, the default value is true
	NeedAutoCreateCollectorDevice interface{} `json:"needAutoCreateCollectorDevice,omitempty"`

	// The Netscan version associated with the Collector
	// Read Only: true
	NetscanVersion string `json:"netscanVersion,omitempty"`

	// The Id of the next recipient to which alert notifications will be sent
	// Read Only: true
	NextRecipient int32 `json:"nextRecipient,omitempty"`

	// The details of the Collector's next upgrade, if one has been scheduled
	// Read Only: true
	NextUpgradeInfo *NextUpgradeInfo `json:"nextUpgradeInfo,omitempty"`

	// The number of devices monitored by the Collector
	// Read Only: true
	NumberOfHosts int32 `json:"numberOfHosts,omitempty"`

	// number of instances
	NumberOfInstances int32 `json:"numberOfInstances,omitempty"`

	// The number of websites monitored by the Collector
	// Read Only: true
	NumberOfWebsites int32 `json:"numberOfWebsites,omitempty"`

	// The details of the Collector's automatic downgrade schedule, if one exists
	OnetimeDowngradeInfo *OnetimeUpgradeInfo `json:"onetimeDowngradeInfo,omitempty"`

	// The details of the Collector's one time upgrade, if one has been scheduled
	OnetimeUpgradeInfo *OnetimeUpgradeInfo `json:"onetimeUpgradeInfo,omitempty"`

	// The OS of the Collector device (e.g. Linux, Windows)
	// Read Only: true
	Platform string `json:"platform,omitempty"`

	// Collector configurations
	// Read Only: true
	PredefinedConfig interface{} `json:"predefinedConfig,omitempty"`

	// The previous version of the collector, used for downgrading
	// Read Only: true
	PreviousVersion string `json:"previousVersion,omitempty"`

	// The interval, in minutes, after which alert notifications for the Collector will be resent
	ResendIval int32 `json:"resendIval,omitempty"`

	// The Proxy's configuration
	// Read Only: true
	SbproxyConf string `json:"sbproxyConf,omitempty"`

	// The device group id when create a new collector device
	SpecifiedCollectorDeviceGroupID int32 `json:"specifiedCollectorDeviceGroupId,omitempty"`

	// The registration status of the Collector. Acceptable values are: 0= unregistered, 1= registered, 2= stopped, 3= suspended
	// Read Only: true
	Status int32 `json:"status,omitempty"`

	// Whether alert clear notifications are suppressed for the Collector
	SuppressAlertClear bool `json:"suppressAlertClear,omitempty"`

	// The time the Collector has been up, in seconds
	// Read Only: true
	UpTime int64 `json:"upTime,omitempty"`

	// The time that the Collector was last updated, in epoch format
	// Read Only: true
	UpdatedOn int64 `json:"updatedOn,omitempty"`

	// The time that the Collector was last updated, in local time format
	// Read Only: true
	UpdatedOnLocal string `json:"updatedOnLocal,omitempty"`

	// The last time the Collector was updated, in epoch format
	// Read Only: true
	UserChangeOn int64 `json:"userChangeOn,omitempty"`

	// The last time the Collector was updated, in the account time zone
	// Read Only: true
	UserChangeOnLocal string `json:"userChangeOnLocal,omitempty"`

	// The permission level of the user that made the API request to get Collector information
	// Read Only: true
	UserPermission string `json:"userPermission,omitempty"`

	// The number of devices monitored by the Collector and visible to the user that made the query
	// Read Only: true
	UserVisibleHostsNum int32 `json:"userVisibleHostsNum,omitempty"`

	// The number of websites monitored by the Collector and visible to the user that made the query
	// Read Only: true
	UserVisibleWebsitesNum int32 `json:"userVisibleWebsitesNum,omitempty"`

	// The Watchdog's configuration
	// Read Only: true
	WatchdogConf string `json:"watchdogConf,omitempty"`

	// The time that the Watchdog Services was last updated, in epoch format
	// Read Only: true
	WatchdogUpdatedOn int64 `json:"watchdogUpdatedOn,omitempty"`

	// The time that the Collector Watchdog was last updated, in local time format
	// Read Only: true
	WatchdogUpdatedOnLocal string `json:"watchdogUpdatedOnLocal,omitempty"`

	// Whether or not the device the Collector is installed on is enabled for fail over
	// Read Only: true
	WebsiteConf string `json:"websiteConf,omitempty"`

	// The java service wrapper's configuration
	// Read Only: true
	WrapperConf string `json:"wrapperConf,omitempty"`
}

// Validate validates this collector
func (m *Collector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomaticUpgradeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextUpgradeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnetimeDowngradeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnetimeUpgradeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Collector) validateAutomaticUpgradeInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AutomaticUpgradeInfo) { // not required
		return nil
	}

	if m.AutomaticUpgradeInfo != nil {
		if err := m.AutomaticUpgradeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automaticUpgradeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Collector) validateCustomProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Collector) validateNextUpgradeInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.NextUpgradeInfo) { // not required
		return nil
	}

	if m.NextUpgradeInfo != nil {
		if err := m.NextUpgradeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextUpgradeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Collector) validateOnetimeDowngradeInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.OnetimeDowngradeInfo) { // not required
		return nil
	}

	if m.OnetimeDowngradeInfo != nil {
		if err := m.OnetimeDowngradeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onetimeDowngradeInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Collector) validateOnetimeUpgradeInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.OnetimeUpgradeInfo) { // not required
		return nil
	}

	if m.OnetimeUpgradeInfo != nil {
		if err := m.OnetimeUpgradeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onetimeUpgradeInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Collector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Collector) UnmarshalBinary(b []byte) error {
	var res Collector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
