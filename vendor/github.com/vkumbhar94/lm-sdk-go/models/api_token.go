// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIToken API token
// swagger:model APIToken
type APIToken struct {

	// The access Id associated with the API Tokens
	// Read Only: true
	AccessID string `json:"accessId,omitempty"`

	// The secret key associated with the API Tokens
	// Read Only: true
	AccessKey string `json:"accessKey,omitempty"`

	// The id of the user associated with the API Tokens
	// Read Only: true
	AdminID int32 `json:"adminId,omitempty"`

	// The name of the user associated with the API Tokens
	// Read Only: true
	AdminName string `json:"adminName,omitempty"`

	// The user who is the API Tokens created by
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// The epoch at which the API Tokens were created
	// Read Only: true
	CreatedOn int64 `json:"createdOn,omitempty"`

	// The id of the API Token
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The epoch at which the API Tokens were last used
	// Read Only: true
	LastUsedOn int64 `json:"lastUsedOn,omitempty"`

	// The note associated with the API Tokens
	Note string `json:"note,omitempty"`

	// The roles assigned to the user that is associated with the API Tokens
	// Read Only: true
	// Unique: true
	Roles []string `json:"roles,omitempty"`

	// 1 | 2 - Whether or not the API Tokens are enabled, where 2 = enabled
	Status int32 `json:"status,omitempty"`
}

// Validate validates this API token
func (m *APIToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIToken) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIToken) UnmarshalBinary(b []byte) error {
	var res APIToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
