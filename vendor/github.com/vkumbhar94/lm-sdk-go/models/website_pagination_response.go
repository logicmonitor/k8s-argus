// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
)

// WebsitePaginationResponse website pagination response
// swagger:model WebsitePaginationResponse
type WebsitePaginationResponse struct {
	itemsField []Website

	// search Id
	// Read Only: true
	SearchID string `json:"searchId,omitempty"`

	// total
	// Read Only: true
	Total int32 `json:"total,omitempty"`
}

// Items gets the items of this base type
func (m *WebsitePaginationResponse) Items() []Website {
	return m.itemsField
}

// SetItems sets the items of this base type
func (m *WebsitePaginationResponse) SetItems(val []Website) {
	m.itemsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *WebsitePaginationResponse) UnmarshalJSON(raw []byte) error {
	var data struct {
		Items json.RawMessage `json:"items,omitempty"`

		SearchID string `json:"searchId,omitempty"`

		Total int32 `json:"total,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propItems []Website
	if string(data.Items) != "null" {
		items, err := UnmarshalWebsiteSlice(bytes.NewBuffer(data.Items), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propItems = items
	}

	var result WebsitePaginationResponse

	// items
	result.itemsField = propItems

	// searchId
	result.SearchID = data.SearchID

	// total
	result.Total = data.Total

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m WebsitePaginationResponse) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		SearchID string `json:"searchId,omitempty"`

		Total int32 `json:"total,omitempty"`
	}{

		SearchID: m.SearchID,

		Total: m.Total,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Items []Website `json:"items,omitempty"`
	}{

		Items: m.itemsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this website pagination response
func (m *WebsitePaginationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebsitePaginationResponse) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items()) { // not required
		return nil
	}

	for i := 0; i < len(m.Items()); i++ {

		if err := m.itemsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebsitePaginationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebsitePaginationResponse) UnmarshalBinary(b []byte) error {
	var res WebsitePaginationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
