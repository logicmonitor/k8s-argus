// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Period period
// swagger:model Period
type Period struct {

	// end minutes
	// Required: true
	EndMinutes *int32 `json:"endMinutes"`

	// start minutes
	// Required: true
	StartMinutes *int32 `json:"startMinutes"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`

	// week days
	// Required: true
	WeekDays []int32 `json:"weekDays"`
}

// Validate validates this period
func (m *Period) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Period) validateEndMinutes(formats strfmt.Registry) error {

	if err := validate.Required("endMinutes", "body", m.EndMinutes); err != nil {
		return err
	}

	return nil
}

func (m *Period) validateStartMinutes(formats strfmt.Registry) error {

	if err := validate.Required("startMinutes", "body", m.StartMinutes); err != nil {
		return err
	}

	return nil
}

func (m *Period) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *Period) validateWeekDays(formats strfmt.Registry) error {

	if err := validate.Required("weekDays", "body", m.WeekDays); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Period) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Period) UnmarshalBinary(b []byte) error {
	var res Period
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
