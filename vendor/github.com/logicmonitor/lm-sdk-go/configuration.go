/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package logicmonitor

import (
"crypto/hmac"
"crypto/sha256"
"encoding/base64"
"encoding/hex"
"encoding/json"
"fmt"
"net/http"
"strconv"
"strings"
"time"
)


type Configuration struct {
	Username      string                       `json:"userName,omitempty"`
	Password      string                       `json:"password,omitempty"`
	APIKeyPrefix  map[string]string            `json:"APIKeyPrefix,omitempty"`
	APIKey        map[string]map[string]string `json:"APIKey,omitempty"`
	Debug         bool                         `json:"debug,omitempty"`
	DebugFile     string                       `json:"debugFile,omitempty"`
	OAuthToken    string                       `json:"oAuthToken,omitempty"`
	BasePath      string                       `json:"basePath,omitempty"`
	Host          string                       `json:"host,omitempty"`
	Scheme        string                       `json:"scheme,omitempty"`
	AccessToken   string                       `json:"accessToken,omitempty"`
	DefaultHeader map[string]string            `json:"defaultHeader,omitempty"`
	UserAgent     string                       `json:"userAgent,omitempty"`
	APIClient     *APIClient
	Transport     *http.Transport
	Timeout       *time.Duration `json:"timeout,omitempty"`
}

func NewConfiguration() *Configuration {
	cfg := &Configuration{
		BasePath:      "https://localhost/santaba/rest",
		DefaultHeader: make(map[string]string),
		APIKey:        make(map[string]map[string]string),
		APIKeyPrefix:  make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
		APIClient:     &APIClient{},
	}

	cfg.APIClient.config = cfg
	return cfg
}

func (c *Configuration) GetBasicAuthEncodedString() string {
	return base64.StdEncoding.EncodeToString([]byte(c.Username + ":" + c.Password))
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

func (c *Configuration) GetAPIKeyWithPrefix(APIKeyIdentifier string, ResourcePath string, Method string, Body interface{}) string {
	if c.APIKeyPrefix[APIKeyIdentifier] != "" {
		return c.APIKeyPrefix[APIKeyIdentifier] + " " + c.GetAuthHash(APIKeyIdentifier, ResourcePath, Method, Body)
	}

	return c.GetAuthHash(APIKeyIdentifier, ResourcePath, Method, Body)
}

func (c *Configuration) GetAuthHash(APIKeyIdentifier string, ResourcePath string, Method string, Body interface{}) string {
	data, err := json.Marshal(Body)
	if err != nil {
		return ""
	}

	if string(data) == "null" {
		data = []byte{}
	}

	authHash := buildAuthHash(c.APIKey[APIKeyIdentifier], Method, string(data), ResourcePath)

	return authHash
}

func buildAuthHash(A map[string]string, method, data, resource string) string {
	now := time.Now()
	nanos := now.UnixNano()
	epoch := strconv.FormatInt(nanos/1000000, 10)

	signature := buildSignature(A["AccessKey"], strings.ToUpper(method), epoch, data, resource)
	auth := fmt.Sprintf("LMv1 %s:%s:%s", A["AccessID"], signature, epoch)

	return auth
}

func buildSignature(accessKey, method, epoch, data, resource string) string {
	h := hmac.New(sha256.New, []byte(accessKey))
	h.Write([]byte(method + epoch + data + resource))
	hexDigest := hex.EncodeToString(h.Sum(nil))
	signature := base64.StdEncoding.EncodeToString([]byte(hexDigest))

	return signature
}
