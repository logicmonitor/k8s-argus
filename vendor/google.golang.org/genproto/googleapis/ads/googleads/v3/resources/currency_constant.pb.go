// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v3/resources/currency_constant.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A currency constant.
type CurrencyConstant struct {
	// The resource name of the currency constant.
	// Currency constant resource names have the form:
	//
	// `currencyConstants/{currency_code}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// ISO 4217 three-letter currency code, e.g. "USD"
	Code *wrappers.StringValue `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Full English name of the currency.
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Standard symbol for describing this currency, e.g. '$' for US Dollars.
	Symbol *wrappers.StringValue `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The billable unit for this currency. Billed amounts should be multiples of
	// this value.
	BillableUnitMicros   *wrappers.Int64Value `protobuf:"bytes,5,opt,name=billable_unit_micros,json=billableUnitMicros,proto3" json:"billable_unit_micros,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CurrencyConstant) Reset()         { *m = CurrencyConstant{} }
func (m *CurrencyConstant) String() string { return proto.CompactTextString(m) }
func (*CurrencyConstant) ProtoMessage()    {}
func (*CurrencyConstant) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f14d3d22f3007ad, []int{0}
}

func (m *CurrencyConstant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyConstant.Unmarshal(m, b)
}
func (m *CurrencyConstant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyConstant.Marshal(b, m, deterministic)
}
func (m *CurrencyConstant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyConstant.Merge(m, src)
}
func (m *CurrencyConstant) XXX_Size() int {
	return xxx_messageInfo_CurrencyConstant.Size(m)
}
func (m *CurrencyConstant) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyConstant.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyConstant proto.InternalMessageInfo

func (m *CurrencyConstant) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *CurrencyConstant) GetCode() *wrappers.StringValue {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CurrencyConstant) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CurrencyConstant) GetSymbol() *wrappers.StringValue {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *CurrencyConstant) GetBillableUnitMicros() *wrappers.Int64Value {
	if m != nil {
		return m.BillableUnitMicros
	}
	return nil
}

func init() {
	proto.RegisterType((*CurrencyConstant)(nil), "google.ads.googleads.v3.resources.CurrencyConstant")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v3/resources/currency_constant.proto", fileDescriptor_6f14d3d22f3007ad)
}

var fileDescriptor_6f14d3d22f3007ad = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8a, 0xd4, 0x30,
	0x1c, 0xc6, 0x69, 0x77, 0x5d, 0x30, 0x2a, 0x48, 0x51, 0xa8, 0xeb, 0x22, 0xbb, 0xca, 0xc0, 0x7a,
	0x49, 0xc4, 0x2e, 0x82, 0xf1, 0xd4, 0xdd, 0xc3, 0xa2, 0xb0, 0x32, 0x54, 0xa6, 0x07, 0x29, 0x94,
	0x34, 0x8d, 0x25, 0xd0, 0x26, 0x25, 0x49, 0x47, 0x06, 0xf1, 0xe2, 0xa3, 0x78, 0xf4, 0x51, 0x7c,
	0x94, 0x79, 0x01, 0xaf, 0xd2, 0x36, 0xcd, 0xc8, 0x0c, 0xb8, 0x73, 0xfb, 0x9a, 0xff, 0xf7, 0xfb,
	0xf2, 0xb5, 0xff, 0x82, 0xb7, 0x95, 0x94, 0x55, 0xcd, 0x10, 0x29, 0x35, 0x1a, 0x65, 0xaf, 0x96,
	0x11, 0x52, 0x4c, 0xcb, 0x4e, 0x51, 0xa6, 0x11, 0xed, 0x94, 0x62, 0x82, 0xae, 0x72, 0x2a, 0x85,
	0x36, 0x44, 0x18, 0xd8, 0x2a, 0x69, 0x64, 0x70, 0x36, 0xfa, 0x21, 0x29, 0x35, 0x74, 0x28, 0x5c,
	0x46, 0xd0, 0xa1, 0xc7, 0x4f, 0xa6, 0xf4, 0x96, 0xbb, 0xc0, 0x91, 0x3e, 0x7e, 0x66, 0x47, 0xc3,
	0x53, 0xd1, 0x7d, 0x41, 0x5f, 0x15, 0x69, 0x5b, 0xa6, 0xb4, 0x9d, 0x9f, 0xfc, 0x83, 0x12, 0x21,
	0xa4, 0x21, 0x86, 0x4b, 0x61, 0xa7, 0xcf, 0xff, 0xf8, 0xe0, 0xe1, 0x95, 0xed, 0x75, 0x65, 0x6b,
	0x05, 0x2f, 0xc0, 0x83, 0xe9, 0x92, 0x5c, 0x90, 0x86, 0x85, 0xde, 0xa9, 0x77, 0x7e, 0x37, 0xb9,
	0x3f, 0x1d, 0x7e, 0x24, 0x0d, 0x0b, 0x5e, 0x81, 0x43, 0x2a, 0x4b, 0x16, 0xfa, 0xa7, 0xde, 0xf9,
	0xbd, 0xd7, 0x27, 0xb6, 0x39, 0x9c, 0x6a, 0xc0, 0x4f, 0x46, 0x71, 0x51, 0xa5, 0xa4, 0xee, 0x58,
	0x32, 0x38, 0x7b, 0x62, 0x48, 0x3b, 0xd8, 0x87, 0xe8, 0x9d, 0xc1, 0x05, 0x38, 0xd2, 0xab, 0xa6,
	0x90, 0x75, 0x78, 0xb8, 0x07, 0x63, 0xbd, 0xc1, 0x0d, 0x78, 0x54, 0xf0, 0xba, 0x26, 0x45, 0xcd,
	0xf2, 0x4e, 0x70, 0x93, 0x37, 0x9c, 0x2a, 0xa9, 0xc3, 0x3b, 0x43, 0xc6, 0xd3, 0x9d, 0x8c, 0xf7,
	0xc2, 0xbc, 0xb9, 0x18, 0x23, 0x82, 0x09, 0x5c, 0x08, 0x6e, 0x6e, 0x06, 0x0c, 0x2f, 0xd6, 0x71,
	0x02, 0x5e, 0x6e, 0x16, 0x63, 0x55, 0xcb, 0x35, 0xa4, 0xb2, 0x41, 0x3b, 0x5f, 0x6f, 0x46, 0xb7,
	0x4e, 0x34, 0xfa, 0xb6, 0xb3, 0xfa, 0xef, 0x97, 0x3f, 0x7c, 0x30, 0xa3, 0xb2, 0x81, 0xb7, 0x2e,
	0xff, 0xf2, 0xf1, 0xf6, 0x15, 0xf3, 0xbe, 0xf9, 0xdc, 0xfb, 0xfc, 0xc1, 0xb2, 0x95, 0xac, 0x89,
	0xa8, 0xa0, 0x54, 0x15, 0xaa, 0x98, 0x18, 0xde, 0x0b, 0x6d, 0x5a, 0xfe, 0xe7, 0x97, 0x7c, 0xe7,
	0xd4, 0x4f, 0xff, 0xe0, 0x3a, 0x8e, 0x7f, 0xf9, 0x67, 0xd7, 0x63, 0x64, 0x5c, 0x6a, 0x38, 0xca,
	0x5e, 0xa5, 0x11, 0x4c, 0x26, 0xe7, 0xef, 0xc9, 0x93, 0xc5, 0xa5, 0xce, 0x9c, 0x27, 0x4b, 0xa3,
	0xcc, 0x79, 0xd6, 0xfe, 0x6c, 0x1c, 0x60, 0x1c, 0x97, 0x1a, 0x63, 0xe7, 0xc2, 0x38, 0x8d, 0x30,
	0x76, 0xbe, 0xe2, 0x68, 0x28, 0x1b, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xcd, 0xaa, 0xb5,
	0x3e, 0x03, 0x00, 0x00,
}
