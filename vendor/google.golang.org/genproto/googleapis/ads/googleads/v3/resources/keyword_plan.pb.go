// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v3/resources/keyword_plan.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "google.golang.org/genproto/googleapis/ads/googleads/v3/common"
	enums "google.golang.org/genproto/googleapis/ads/googleads/v3/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Keyword Planner plan.
// Max number of saved keyword plans: 10000.
// It's possible to remove plans if limit is reached.
type KeywordPlan struct {
	// The resource name of the Keyword Planner plan.
	// KeywordPlan resource names have the form:
	//
	// `customers/{customer_id}/keywordPlans/{kp_plan_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The ID of the keyword plan.
	Id *wrappers.Int64Value `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the keyword plan.
	//
	// This field is required and should not be empty when creating new keyword
	// plans.
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The date period used for forecasting the plan.
	ForecastPeriod       *KeywordPlanForecastPeriod `protobuf:"bytes,4,opt,name=forecast_period,json=forecastPeriod,proto3" json:"forecast_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *KeywordPlan) Reset()         { *m = KeywordPlan{} }
func (m *KeywordPlan) String() string { return proto.CompactTextString(m) }
func (*KeywordPlan) ProtoMessage()    {}
func (*KeywordPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a261a590e572b8, []int{0}
}

func (m *KeywordPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordPlan.Unmarshal(m, b)
}
func (m *KeywordPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordPlan.Marshal(b, m, deterministic)
}
func (m *KeywordPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordPlan.Merge(m, src)
}
func (m *KeywordPlan) XXX_Size() int {
	return xxx_messageInfo_KeywordPlan.Size(m)
}
func (m *KeywordPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordPlan.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordPlan proto.InternalMessageInfo

func (m *KeywordPlan) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *KeywordPlan) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *KeywordPlan) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *KeywordPlan) GetForecastPeriod() *KeywordPlanForecastPeriod {
	if m != nil {
		return m.ForecastPeriod
	}
	return nil
}

// The forecasting period associated with the keyword plan.
type KeywordPlanForecastPeriod struct {
	// Required. The date used for forecasting the Plan.
	//
	// Types that are valid to be assigned to Interval:
	//	*KeywordPlanForecastPeriod_DateInterval
	//	*KeywordPlanForecastPeriod_DateRange
	Interval             isKeywordPlanForecastPeriod_Interval `protobuf_oneof:"interval"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *KeywordPlanForecastPeriod) Reset()         { *m = KeywordPlanForecastPeriod{} }
func (m *KeywordPlanForecastPeriod) String() string { return proto.CompactTextString(m) }
func (*KeywordPlanForecastPeriod) ProtoMessage()    {}
func (*KeywordPlanForecastPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a261a590e572b8, []int{1}
}

func (m *KeywordPlanForecastPeriod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordPlanForecastPeriod.Unmarshal(m, b)
}
func (m *KeywordPlanForecastPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordPlanForecastPeriod.Marshal(b, m, deterministic)
}
func (m *KeywordPlanForecastPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordPlanForecastPeriod.Merge(m, src)
}
func (m *KeywordPlanForecastPeriod) XXX_Size() int {
	return xxx_messageInfo_KeywordPlanForecastPeriod.Size(m)
}
func (m *KeywordPlanForecastPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordPlanForecastPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordPlanForecastPeriod proto.InternalMessageInfo

type isKeywordPlanForecastPeriod_Interval interface {
	isKeywordPlanForecastPeriod_Interval()
}

type KeywordPlanForecastPeriod_DateInterval struct {
	DateInterval enums.KeywordPlanForecastIntervalEnum_KeywordPlanForecastInterval `protobuf:"varint,1,opt,name=date_interval,json=dateInterval,proto3,enum=google.ads.googleads.v3.enums.KeywordPlanForecastIntervalEnum_KeywordPlanForecastInterval,oneof"`
}

type KeywordPlanForecastPeriod_DateRange struct {
	DateRange *common.DateRange `protobuf:"bytes,2,opt,name=date_range,json=dateRange,proto3,oneof"`
}

func (*KeywordPlanForecastPeriod_DateInterval) isKeywordPlanForecastPeriod_Interval() {}

func (*KeywordPlanForecastPeriod_DateRange) isKeywordPlanForecastPeriod_Interval() {}

func (m *KeywordPlanForecastPeriod) GetInterval() isKeywordPlanForecastPeriod_Interval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *KeywordPlanForecastPeriod) GetDateInterval() enums.KeywordPlanForecastIntervalEnum_KeywordPlanForecastInterval {
	if x, ok := m.GetInterval().(*KeywordPlanForecastPeriod_DateInterval); ok {
		return x.DateInterval
	}
	return enums.KeywordPlanForecastIntervalEnum_UNSPECIFIED
}

func (m *KeywordPlanForecastPeriod) GetDateRange() *common.DateRange {
	if x, ok := m.GetInterval().(*KeywordPlanForecastPeriod_DateRange); ok {
		return x.DateRange
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeywordPlanForecastPeriod) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeywordPlanForecastPeriod_DateInterval)(nil),
		(*KeywordPlanForecastPeriod_DateRange)(nil),
	}
}

func init() {
	proto.RegisterType((*KeywordPlan)(nil), "google.ads.googleads.v3.resources.KeywordPlan")
	proto.RegisterType((*KeywordPlanForecastPeriod)(nil), "google.ads.googleads.v3.resources.KeywordPlanForecastPeriod")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v3/resources/keyword_plan.proto", fileDescriptor_b7a261a590e572b8)
}

var fileDescriptor_b7a261a590e572b8 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0x6e, 0xd2, 0x22, 0x76, 0xfa, 0xa3, 0xe4, 0x6a, 0x5b, 0x8b, 0xb4, 0xd5, 0x42, 0x55, 0x98,
	0x29, 0x4d, 0xf1, 0x22, 0x7a, 0x93, 0x45, 0xed, 0x8f, 0x20, 0x4b, 0x84, 0x45, 0xea, 0xc2, 0x32,
	0xcd, 0xcc, 0x86, 0x60, 0x32, 0x13, 0x66, 0x26, 0x5b, 0xa4, 0xf4, 0xc2, 0x57, 0xf1, 0xd2, 0x47,
	0xf1, 0xde, 0x97, 0xe8, 0x0b, 0x78, 0x25, 0x48, 0x26, 0x33, 0xd3, 0x2d, 0x9a, 0xf6, 0xee, 0x4c,
	0xce, 0x77, 0xbe, 0xf3, 0x9d, 0xf3, 0x9d, 0x80, 0x83, 0x8c, 0xf3, 0xac, 0xa0, 0x08, 0x13, 0x89,
	0xda, 0xb0, 0x89, 0xa6, 0x21, 0x12, 0x54, 0xf2, 0x5a, 0xa4, 0x54, 0xa2, 0x2f, 0xf4, 0xeb, 0x39,
	0x17, 0x64, 0x5c, 0x15, 0x98, 0xc1, 0x4a, 0x70, 0xc5, 0x83, 0xad, 0x16, 0x0a, 0x31, 0x91, 0xd0,
	0x55, 0xc1, 0x69, 0x08, 0x5d, 0xd5, 0xfa, 0xf3, 0x2e, 0xe2, 0x94, 0x97, 0x25, 0x67, 0x88, 0x60,
	0x45, 0x65, 0x4b, 0xb7, 0xde, 0xef, 0xc2, 0x52, 0x56, 0x97, 0x37, 0x05, 0x8c, 0x27, 0x5c, 0xd0,
	0x14, 0x4b, 0x35, 0xce, 0x99, 0xa2, 0x62, 0x8a, 0x0b, 0xc3, 0xb1, 0x66, 0x39, 0xaa, 0xdc, 0x69,
	0x37, 0xa9, 0xc7, 0x26, 0xa5, 0x5f, 0x67, 0xf5, 0x04, 0x9d, 0x0b, 0x5c, 0x55, 0x54, 0xd8, 0xf6,
	0x1b, 0x33, 0xa5, 0x98, 0x31, 0xae, 0xb0, 0xca, 0x39, 0x33, 0xd9, 0xed, 0x5f, 0x3e, 0x58, 0x7a,
	0xdf, 0x2a, 0x18, 0x14, 0x98, 0x05, 0x4f, 0xc0, 0x8a, 0xe5, 0x1f, 0x33, 0x5c, 0xd2, 0x9e, 0xb7,
	0xe9, 0xed, 0x2e, 0x26, 0xcb, 0xf6, 0xe3, 0x07, 0x5c, 0xd2, 0xe0, 0x05, 0xf0, 0x73, 0xd2, 0xf3,
	0x37, 0xbd, 0xdd, 0xa5, 0xfd, 0x47, 0x66, 0x45, 0xd0, 0xf6, 0x87, 0xc7, 0x4c, 0xbd, 0x3c, 0x18,
	0xe2, 0xa2, 0xa6, 0x89, 0x9f, 0x93, 0x60, 0x0f, 0x2c, 0x68, 0xa2, 0x79, 0x0d, 0xdf, 0xf8, 0x07,
	0xfe, 0x51, 0x89, 0x9c, 0x65, 0x2d, 0x5e, 0x23, 0x03, 0x0a, 0x1e, 0xb8, 0x3d, 0x54, 0x54, 0xe4,
	0x9c, 0xf4, 0x16, 0x74, 0xf1, 0x6b, 0x78, 0xa7, 0x33, 0x70, 0x66, 0x98, 0x77, 0x86, 0x64, 0xa0,
	0x39, 0x92, 0xd5, 0xc9, 0x8d, 0x77, 0xf4, 0xf9, 0x2a, 0xfe, 0x04, 0x9e, 0x5e, 0xd3, 0x98, 0xa8,
	0xca, 0x25, 0x4c, 0x79, 0x89, 0x66, 0xb7, 0xb2, 0x97, 0xd6, 0x52, 0xf1, 0x92, 0x0a, 0x89, 0x2e,
	0x6c, 0x78, 0x69, 0x9d, 0x6b, 0x10, 0x12, 0x5d, 0xcc, 0xfa, 0x78, 0xb9, 0xfd, 0xdb, 0x03, 0x6b,
	0x9d, 0x52, 0x82, 0x6f, 0x1e, 0x58, 0x69, 0x4e, 0xc4, 0xd9, 0xac, 0xd7, 0xbc, 0xba, 0x7f, 0xda,
	0x39, 0xa0, 0xbe, 0x95, 0xff, 0x0d, 0x77, 0x6c, 0x18, 0xde, 0xb2, 0xba, 0xbc, 0x2d, 0x7f, 0x34,
	0x97, 0x2c, 0x37, 0x2d, 0xed, 0x3b, 0x38, 0x01, 0x40, 0x4b, 0x10, 0x98, 0x65, 0xd4, 0x98, 0xf9,
	0xac, 0xb3, 0x7f, 0x7b, 0xd7, 0xf0, 0x0d, 0x56, 0x34, 0x69, 0x0a, 0x8e, 0xe6, 0x92, 0x45, 0x62,
	0x1f, 0x7d, 0x00, 0xee, 0xdb, 0x49, 0xfa, 0x7f, 0x3c, 0xb0, 0x93, 0xf2, 0xf2, 0x6e, 0xab, 0xfa,
	0x0f, 0x67, 0xe4, 0x0e, 0x9a, 0x73, 0x18, 0x78, 0xa7, 0x27, 0xa6, 0x2c, 0xe3, 0x05, 0x66, 0x19,
	0xe4, 0x22, 0x43, 0x19, 0x65, 0xfa, 0x58, 0xd0, 0xb5, 0x41, 0xb7, 0xfc, 0xd0, 0xaf, 0x5c, 0xf4,
	0xdd, 0x9f, 0x3f, 0x8c, 0xe3, 0x1f, 0xfe, 0xd6, 0x61, 0x4b, 0x19, 0x13, 0x09, 0xdb, 0xb0, 0x89,
	0x86, 0x21, 0x4c, 0x2c, 0xf2, 0xa7, 0xc5, 0x8c, 0x62, 0x22, 0x47, 0x0e, 0x33, 0x1a, 0x86, 0x23,
	0x87, 0xb9, 0xf2, 0x77, 0xda, 0x44, 0x14, 0xc5, 0x44, 0x46, 0x91, 0x43, 0x45, 0xd1, 0x30, 0x8c,
	0x22, 0x87, 0x3b, 0xbb, 0xa7, 0xc5, 0x86, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x77, 0x4d,
	0x29, 0x7c, 0x04, 0x00, 0x00,
}
