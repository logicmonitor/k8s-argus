// Code generated by go generate; DO NOT EDIT.
package enums

import (
	"fmt"
	"strings"
	
	{{- range $value := .Resources.Apis}}{{- if ne $value.Alias "" }}
	{{ $value.Alias }} "{{ $value.PackageName }}"
	{{- end}}{{- end }}
	"k8s.io/apimachinery/pkg/runtime"
)

{{- $resources := .Resources.Resources }}
{{ $apis := .Resources.Apis }}
// ResourceType resource
type ResourceType uint32

// NOTE: RESOURCE_MODIFICATION need to change when adding/deleting resource for monitoring
// START This comment starts the section to be changed when enum added or modified
const (
	Unknown ResourceType = iota
	{{- range $value := .Resources.Resources}}
	{{- if ne $value.LongName "Unknown"}}
	{{ $value.LongName }}
	{{- end}}
	{{- end}}
)

// ALLResourceTypes All resource type slice
// NOTE: RESOURCE_MODIFICATION need to change when adding/deleting resource for monitoring
var ALLResourceTypes = []ResourceType{
	{{- range $value := .Resources.Resources}}
	{{- if ne $value.LongName "Unknown"}}
	{{ $value.LongName }},
	{{- end}}
	{{- end}}
}

// nolint: clyclop
func (resourceType ResourceType) MarshalText() ([]byte, error) {
	switch resourceType {
	{{- range $value := .Resources.Resources }}
	case {{ $value.LongName }}:
		return []byte("{{ $value.LowerCase }}"), nil
	{{- end }}
	}
	return nil, fmt.Errorf("not a valid ResourceType to marshal %v", uint32(resourceType))
}

// nolint: clyclop
func ParseResourceType(resourceType string) (ResourceType, error) {
	switch strings.ToLower(resourceType) {
	{{- range $value := .Resources.Resources }}{{ $length := len $value.ParsedResourceType }}{{ if last $length -1}}
	case {{ range $i, $v := $value.ParsedResourceType }}"{{$v}}"{{ if last $length $i}}, {{ end}}{{ end }}:
		return {{$value.LongName}}, nil
	{{- end }}
	{{- end }}
	}

	return Unknown, fmt.Errorf("not a valid ResourceType to parse: %s", resourceType)
}

// nolint: clyclop
func (resourceType ShortResourceType) MarshalText() ([]byte, error) {
	switch ResourceType(resourceType) {
	{{- range $value := .Resources.Resources }}
	case {{ $value.LongName}}:
		return []byte("{{ (index $value.ShortName 0) }}"), nil
	{{- end}}
	}

	return nil, fmt.Errorf("not a valid ShortResourceType to marshal %d", resourceType)
}

// nolint: clyclop
func ParseShortResourceType(shortResourceType string) (ShortResourceType, error) {
	var l ResourceType
	switch strings.ToLower(shortResourceType) {
	{{- range $value := .Resources.Resources }}{{ $length := len $value.ShortName }}{{ if last $length -1}}
	case {{ range $i, $v := $value.ShortName }}"{{$v}}"{{ if last $length $i}}, {{ end}}{{ end }}:
		l = {{ $value.LongName}}
	{{- end}}
	{{- end}}
	default:

	return ShortResourceType(Unknown), fmt.Errorf("not a valid ShortResourceType to parse: %q", shortResourceType)
	}

	return ShortResourceType(l), nil
}

// nolint: clyclop
func (resourceType *ResourceType) Title() string {
	switch *resourceType {
	{{- range $value := .Resources.Resources }}
	case {{ $value.LongName }}:
		return "{{ $value.DisplayName}}"
	{{- end}}
	}

	return "Unknown"
}

// nolint: clyclop
func (resourceType *ResourceType) TitlePlural() string {
	switch *resourceType {
	{{- range $value := .Resources.Resources }}
	case {{ $value.LongName }}:
		return "{{- titlePlural $value }}"
	{{- end}}
	}

	return "Unknown"
}

// nolint: clyclop
func (resourceType *ResourceType) K8SObjectType() runtime.Object {
	switch *resourceType {
	{{- range $value := .Resources.Resources }}{{ if notNil $value.Apis }}
	case {{ $value.LongName }}:
		return &{{ $value.Apis }}.{{ k8sObjectType $value }}{} // nolint: exhaustivestruct{{ end }}{{- end}}
	case {{ getCases .Resources.Resources }}:
		return nil
	default:

		return nil
	}
}

// nolint: clyclop
func (resourceType *ResourceType) K8SAPIVersion() string {
	switch *resourceType {
	{{- range $value := $apis }}
	case {{ apiVersion $resources $value}}:
		return "{{ api $value }}"
	{{- end }}
	default:
		return ""
	}
}

func (resourceType *ResourceType) IsNamespaceScopedResource() bool {
	switch *resourceType {
	case {{ namespaced .Resources.Resources true }}:
		return true
	case {{ namespaced .Resources.Resources false }}:
		return false
	default:
		return false
	}
}

func (resourceType *ResourceType) APIGroup() string {
	switch *resourceType {
	{{- $apiGroups := getApiGroups .Resources.Apis }}
	{{- range $value := $apiGroups }}
	case {{ apiGroup $resources $apis $value }}:
		return "{{- apiGroupValue $value }}"
	{{- end }}
	default:
		return ""
	}
}

func (resourceType *ResourceType) IsK8SPingResource() bool {
	switch *resourceType {
	case {{ pingResource .Resources.Resources true }}:
		return true
	case {{ pingResource .Resources.Resources false }}:
		return false
	default:
		return true
	}
}

func (resourceType *ResourceType) HasAdditionalHostname() bool {
	switch *resourceType {
	case {{ additionalHostname .Resources.Resources true }}:
		return true
	default:
		return false
	}
}
